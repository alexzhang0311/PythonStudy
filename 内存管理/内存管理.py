###垃圾回收机制###

#引用计数
'''
当某个对象引用计数为0时，则把该对象的内存地址回收
'''

#循环引用
'''
两个对象互相引用对方的情况，那么这两个对象的引用技术永远不会为0，也就是这两个对象永远不会释放
'''

#分代回收
'''
三个链表管理对象。
1、零代链表
create_count:被创建的对象
delete_count:被释放的对象
create_count - delete_count >= 700 认为出现了循环引用，会遍历零代列表，可以找到所有循环引用的对象，将所有的循环引用对象计数减一之后再对比引用计数是否为0
2、一代链表
将阈值大于700并且引用计数不为0的对象，放置于一代链表

一代链表清理达到某个阈值后，会将计数不为0的对象，放置于一代链表

3、二代链表 
二代链表中的对象，大部分是程序处理过程中需要一直存在的对象

如果零代链表被遍历超过10次，会遍历一代链表，一代链表遍历10次，会遍历二代链表
'''

###垃圾回收算法核心行为###
'''
弱代假说
垃圾回收器会更频繁的处理新的对象。
Python优先处理那些很快就可能变成垃圾的新对象。同时在很少的时候，当满足阈值条件，收集器才会去处理一、二代链表中的对象，减轻零代链表中的压力，降低CPU。
'''